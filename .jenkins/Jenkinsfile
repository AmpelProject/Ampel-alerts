pipeline {
  agent none
  stages {
    stage('dependencies') {
      agent any
      steps {
          dir(path: '.jenkins/Ampel-interface') {
            git(url: 'https://github.com/AmpelProject/Ampel-interface', credentialsId: 'github')
          }
          dir(path: '.jenkins/Ampel-core') {
            git(url: 'https://github.com/AmpelProject/Ampel-core', credentialsId: 'github')
          }
          dir(path: '.jenkins/Ampel-photometry') {
            git(url: 'https://github.com/AmpelProject/Ampel-photometry', credentialsId: 'github')
          }
      }
    }
    stage('build') {
      agent {
        dockerfile {
          filename '.jenkins/Dockerfile.build'
        }
      }
      steps {
        sh 'rm mypy.*.xml || true'
        sh 'run_mypy.sh ampel'
      }
      post {
        always {
          junit 'mypy.*.xml'
        }
      }
    }
    stage('test') {
      agent {
        dockerfile {
          filename '.jenkins/Dockerfile.build'
          args "-v /var/lib/jenkins-ztf/workspace/Ampel-alerts_master:/build"
        }
      }
      environment {
        COVERALLS_REPO_TOKEN = credentials('coveralls-repo-token')
      }
      steps {
        sh 'rm /build/pytest.xml || true'
        sh 'rm /build/coverage || true'
        sh 'cd /build && python setup.py egg_info'
        sh 'cd /build &&pytest $(find ampel -name test -prune -o -type f -name \'*.py\' | xargs -L1 dirname | sort -u | xargs -I_ echo -n "--cov=_ ") --junitxml=pytest.xml'
      }
      post {
        always {
          junit '/build/pytest.xml'
          sh 'cd /build && coveralls'
        }
      }
    }
  }
}
